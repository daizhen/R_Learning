library(tm)
library(ggplot2)
spam.path <- "data/spam"
spam2.path <- "data/spam_2"
easyham.path <- "data/easy_ham"
easyham2.path <- "data/easy_ham_2"
hardham.path <- "data/hard_ham"
hardham2.path <- "data/hard_ham_2"

get.msg <- function(path)
{
    connection <- file(path,open="rt",encoding="latin1")

    #All text of the mail including message and header
    text <- readLines(connection)
    msg <- text[seq(which(text=="")[1]+1,length(text),1)]
    close(connection)
    return(paste(msg,collapse="\n"))
}

get.tdm <- function(doc.vec)
{
    doc.corpus <- Corpus(VectorSource(doc.vec))
    control <- list(stopwords = TRUE, removePunctuation=T,removeNumbers=T, minDocFreq=2)
    doc.tdm <- TermDocumentMatrix(doc.corpus,control)
    return(doc.tdm)
}

##Get file dfs by input file paths
get.df <-function(file.full.names)
{
    all.messages <-sapply(file.full.names, get.msg)
    message.tdm <- get.tdm( all.messages)
    message.matrix <- as.matrix(message.tdm)
    term.counts <- rowSums(message.matrix)
    term.df <- data.frame(cbind(names( term.counts),as.numeric(term.counts)), stringsAsFactors = F)
    names(term.df) <-  c("term","frequency")
    term.df$frequency <- as.numeric( term.df$frequency )

    term.occurrence <- sapply(1:nrow(message.matrix),function(i){length(which(message.matrix[i,]>0))/ncol(message.matrix)})
    term.density <- term.df$frequency/sum(term.df$frequency)
    term.df <-transform(term.df,density=term.density,occurrence=term.occurrence)
    return(term.df)
}

classify.email <-function(path,trainning.df,prior=0.5,c=1e-6)
{
	msg <- get.msg(path);
	msg.tdm <- get.tdm(msg);
	msg.freq <- rowSums(as.matrix(msg.tdm))
	msg.match <-intersect(names(msg.freq),trainning.df$term)
	
	if(lenght(msg.match) <1)
	{
		return(prior*c^length(msg.freq))
	}
	else
	{
		match.probs <-trainning.df$occurrence[match(msg.match,trainning.df$term)]
		return(prior*prod(match.probs)*c^(length(msg.freq) - length(match.probs)))
	}
}


#construct spam df
spam.docs <-dir(spam.path)
spam.docs <-spam.docs[which(spam.docs!="cmds")]
spam.full.names <- sapply(spam.docs,function(filePath){return (paste(spam.path,filePath,sep="/"))})
spam.full.names <-as.vector(spam.full.names)
spam.df <-get.df(spam.full.names )



#construct ham df


easyham.docs <-dir(easyham.path)
easyham.docs <-easyham.docs[which(easyham.docs!="cmds")]
easyham.full.names <- sapply(easyham.docs,function(filePath){return (paste(easyham.path,filePath,sep="/"))})
easyham.full.names <-as.vector(easyham.full.names)
easyham.full.names.selected <- easyham.full.names[1:500]

easyham.df <-get.df(easyham.full.names.selected)



#verify the trainning model

hardham.docs <-dir(hardham.path)
hardham.docs <-hardham.docs[which(hardham.docs!="cmds")]
hardham.full.names <- sapply(hardham.docs,function(filePath){return (paste(hardham.path,filePath,sep="/"))})
hardham.full.names <-as.vector(hardham.full.names)

hardham.spamtest <-sapply(hardham.full.names,function(p){return(classify.email(p,spam.df))})
hardham.hamtest <-sapply(hardham.full.names,function(p){return(classify.email(p,easyham.df))})
hardham.result <- ifelse(hardham.spamtest>hardham.hamtest,T,F)



#all.spam <- sapply(spam.docs, function(filePath){return (get.msg(paste(spam.path,filePath,sep="/")))})


#spam.tdm <- get.tdm(all.spam)

##rows: word terms
##columns: files
#spam.matrix <- as.matrix(spam.tdm)

##got all terms
#spam.count <-rowSums(spam.matrix)
#spam.df <-data.frame(cbind(names(spam.count),as.numeric(spam.count)),stringsAsFactors = F)
#names(spam.df) <- c("term","frequency")
#spam.df$frequency <- as.numeric(spam.df$frequency)
#spam.occurrence <- sapply(1:nrow(spam.matrix),function(i){length(which(spam.matrix[i,]>0))/ncol(spam.matrix)})
#spam.density <- spam.df$frequency/sum(spam.df$frequency)
#spam.df <-transform(spam.df,density=spam.density,occurrence=spam.occurrence)


